{% extends 'base.html.twig' %}


{% block body %}
	<div id="alert">
	</div>
	<div class="flex justify-center">
		<turbo-frame id="document-frame" src="{{ url('document_form') }}" loading="lazy">
			<div class="skeleton w-80 h-64"></div>
		</turbo-frame>
	</div>
	<div class="flex justify-center">
		<div class="m-5 w-1/2">
			<table id="resultsTable" class="table">
				<thead>
					<tr>
						<th></th>
						<th>Nom du document</th>
						<th>État</th>
						<th>Type de document</th>
						<th></th>
					</tr>
				</thead>
				<tbody id="tabresultsTableBody">
					{% if documents is empty %}
						<tr id="none-row">
							<td colspan="4" class="text-center">Aucun document trouvé</td>
						</tr>
					{% else %}
						{% for document in documents %}
							<tr id="document-row-{{ document.id }}">
								{# Colonne “delete” avec une croix #}
								<td class="px-1 text-center">
									<form
											method="post"
											action="{{ path('delete_document', { id: document.id }) }}"
											onsubmit="return confirm('Êtes-vous sûr de vouloir supprimer ce document ?');"
											data-turbo="true"
											class="inline-block"
									>
										<input
												type="hidden"
												name="_token"
												value="{{ csrf_token('delete_document_' ~ document.id) }}"
										>
										<button
												type="submit"
												class="btn btn-ghost btn-sm btn-circle text-error hover:bg-error/10 p-0"
												title="Supprimer"
										>
											<i class="fa-solid fa-xmark"></i>
										</button>
									</form>
								</td>

								{# Ensuite tes colonnes existantes #}
								<td>{{ document.nom }}</td>
								<td class="text-center">
									{% if document.statut %}
										{% set sid = document.statut.id %}
										{% if sid == 1 %}
											<i class="fa-solid fa-circle-check fa-lg text-success"></i>
										{% elseif sid == 2 %}
											<i class="fa-solid fa-circle-exclamation fa-lg text-warning"></i>
										{% else %}
											<i class="fa-solid fa-circle-xmark fa-lg text-error"></i>
										{% endif %}
									{% else %}
										<i class="fa-solid fa-circle-xmark fa-lg text-error"></i>
									{% endif %}
								</td>
								<td>{{ document.typeLivrable.nom }}</td>
								<td class="whitespace-nowrap">
									{% if document.statut %}
										<button
												class="btn btn-primary btn-sm{% if document.statut.id == 6 %} btn-disabled{% endif %}"
												onclick="openVoirControlesModal({{ document.id }})"
										>
											<i class="fa-solid fa-magnifying-glass"></i>
											Voir
										</button>
									{% endif %}
								</td>
							</tr>
						{% endfor %}
					{% endif %}


				</tbody>
			</table>
		</div>
	</div>
	<dialog id="modalControles" class="modal">
		<div class="modal-box">
			<turbo-frame id="affichageControles" src="{{ url('affichage_controle')}}" loading="lazy">
				<div class="flex justify-center">
					<div class="loading loading-xl loading-spinner text-primary h-96"></div>
				</div>
			</turbo-frame>
		</div>
		<form method="dialog" class="modal-backdrop">
			<button>close</button>
		</form>
	</dialog>
	<script>
		function openVoirControlesModal(documentID) {
			const turboFrame = document.getElementById('affichageControles');
			turboFrame.src = `/document/controles/?id=` + documentID;

			// Afficher la modale
			const modal = document.getElementById('modalControles');
			modal.showModal();
		}

		function closeToast() {
			const toast = document.getElementById('toast-success');
			toast.remove();
		}

		function autoCloseToast(id, timeout = 3000) {
			setTimeout(() => {
				const toast = document.getElementById(id);
				if (toast) {
					toast.remove();
				}
			}, timeout);
		}

		document.addEventListener("turbo:before-stream-render", (e) => {
			// On remonte jusqu'au turbo-stream au cas où target serait le template
			const streamEl = e.target.closest("turbo-stream");
			if (!streamEl) return;

			const action = streamEl.getAttribute("action");
			if (action === "remove") {
				// --- ANIMATION SLIDE-OUT ---
				e.preventDefault();
				const targetId = streamEl.getAttribute("target");
				const row = document.getElementById(targetId);
				if (!row) return;

				row.classList.add("slide-out");
				row.addEventListener("transitionend", () => row.remove(), { once: true });
				return;
			}

			if (action === "append" || action === "prepend") {
				// --- ANIMATION SLIDE-IN ---
				e.preventDefault();
				const tpl = streamEl.querySelector("template");
				if (!tpl) return;

				// clone the new row
				const clone = document.importNode(tpl.content, true);
				const newRow = clone.firstElementChild;
				if (!newRow) return;

				// état initial hors écran
				newRow.classList.add("slide-in-start");

				// insère
				const container = document.getElementById(streamEl.getAttribute("target"));
				if (!container) return;
				if (action === "append") container.appendChild(newRow);
				else container.insertBefore(newRow, container.firstChild);

				// force reflow pour garantir la transition
				void newRow.offsetWidth;

				// on lance la transition
				newRow.classList.add("slide-in");
			}
		});
	</script>
{% endblock %}
